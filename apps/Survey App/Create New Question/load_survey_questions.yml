id: load_survey_questions
type: datasource
subtype: SqlQueryUnified
resourceName: dc8029bc-3980-4836-841e-776c64eeca49
resourceDisplayName: Clinical Content PostgresSQL DB
template:
  ordered:
    - queryRefreshTime: ''
    - records: ''
    - lastReceivedFromResourceAt: null
    - databasePasswordOverride: ''
    - queryDisabledMessage: ''
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: 18
    - resourceNameOverride: ''
    - runWhenModelUpdates: true
    - showFailureToaster: true
    - query: >-
        select * from surveys.survey_question_link 

        join surveys.question

        on surveys.survey_question_link.question_uuid =
        surveys.question.question_uuid

        left join surveys.question_characteristic

        on surveys.question_characteristic.question_characteristic_uuid =
        surveys.question.question_characteristic_uuid

        where survey_uuid={{ variable0 }}

        order by position asc
    - playgroundQueryUuid: 6900c841-7a47-4061-88c4-0770324ade5d
    - playgroundQueryId: 15
    - privateParams: []
    - triggersOnSuccess:
        - max_position_survey
    - runWhenPageLoadsDelay: ''
    - warningCodes: []
    - data: null
    - recordId: ''
    - retoolVersion: 2.70.21
    - importedQueryInputs:
        ordered:
          - variable0: '{{ urlparams.uuid }}'
    - showSuccessConfetti: false
    - isImported: true
    - showSuccessToaster: true
    - dataArray: []
    - cacheKeyTtl: ''
    - filterBy: ''
    - databaseHostOverride: ''
    - metadata: null
    - editorMode: sql
    - actionType: ''
    - triggersOnFailure: []
    - changesetObject: ''
    - shouldUseLegacySql: false
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - databaseNameOverride: ''
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - watchedParams: []
    - enableErrorTransformer: false
    - enableBulkUpdates: false
    - showLatestVersionUpdatedWarning: false
    - timestamp: 0
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: false
    - showUpdateSetValueDynamicallyToggle: true
    - bulkUpdatePrimaryKey: ''
    - runWhenPageLoads: false
    - transformer: >-
        // type your code here

        // example: return formatDataAsArray(data).filter(row => row.quantity >
        20)

        return data
    - events:
        - ordered:
            - event: success
            - type: datasource
            - method: trigger
            - pluginId: max_position_survey
            - params:
                ordered: []
            - waitType: debounce
            - waitMs: '0'
    - tableName: ''
    - queryTimeout: '10001'
    - requireConfirmation: false
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - databaseUsernameOverride: ''
    - shouldEnableBatchQuerying: false
    - doNotThrowOnNoOp: false
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2021-07-29T20:46:03.705Z
