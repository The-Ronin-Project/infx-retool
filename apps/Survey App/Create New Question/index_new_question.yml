id: index_new_question
type: datasource
subtype: ElasticSearchQuery
resourceName: 3e68115b-9776-4956-86b4-f468d2d1f836
resourceDisplayName: ElasticSearch
template:
  ordered:
    - queryRefreshTime: ''
    - method: index
    - lastReceivedFromResourceAt: null
    - queryDisabledMessage: ''
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: latest
    - resourceNameOverride: ''
    - runWhenModelUpdates: false
    - showFailureToaster: true
    - query: "{ \n  body: {\n    \"historical_question\": false,\n    \"future_question\": {{checkbox2.value}},\n    \"not_expected_reason\": {{textinput1.value}},\n    \"present_most_severe_first\": {{checkbox1.value}},\n    \"provider_sees\": {{textinput2.value}},\n    \"question_characteristic_uuid\": {{load_new_question.data.question_characteristic_uuid[0]}},\n    \"question_characteristic\": {{load_new_question.data.question_characteristic[0]}},\n    \"question_text\": {{textinput3.value}},\n    \"question_uuid\": {{new_question_uuid.value}},\n    \"requires_question\": null,\n    \"slug\": {{textinput5.value}},\n    \"specific_answer_uuids\": null,\n    \"symptom_uuids\": {{load_new_question.data.symptom_uuid}},\n    \"symptoms\": {{load_symptoms_for_new_question.dataArray.map((item) => {\n  \treturn {\n      uuid: item.symptom_uuid[0],\n      symptom_id: item.symptom_id[0],\n      provider_label: item.provider_label[0],\n      patient_label: item.patient_label[0]\n  \t}\n\t\t})}}\n  },\n  index: \"survey_question\",\n  id: {{new_question_uuid.value}},\n  type: \"_doc\"\n}"
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - privateParams: []
    - triggersOnSuccess: []
    - runWhenPageLoadsDelay: ''
    - data: null
    - importedQueryInputs:
        ordered: []
    - showSuccessConfetti: false
    - isImported: false
    - showSuccessToaster: true
    - cacheKeyTtl: ''
    - metadata: null
    - triggersOnFailure: []
    - changesetObject: ''
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - watchedParams: []
    - enableErrorTransformer: false
    - showLatestVersionUpdatedWarning: false
    - timestamp: 0
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: false
    - showUpdateSetValueDynamicallyToggle: false
    - runWhenPageLoads: false
    - transformer: >-
        // type your code here

        // example: return formatDataAsArray(data).filter(row => row.quantity >
        20)

        return data
    - events: []
    - queryTimeout: '10000'
    - requireConfirmation: false
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - collection: ''
    - queryThrottleTime: '750'
    - updateSetValueDynamically: true
    - notificationDuration: ''
createdAt: 2021-08-13T15:49:07.212Z
