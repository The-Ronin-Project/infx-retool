id: requires_question_search
type: datasource
subtype: ElasticSearchQuery
resourceName: 3e68115b-9776-4956-86b4-f468d2d1f836
resourceDisplayName: ElasticSearch
template:
  ordered:
    - queryRefreshTime: ''
    - method: search
    - lastReceivedFromResourceAt: null
    - queryDisabledMessage: ''
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: latest
    - resourceNameOverride: ''
    - runWhenModelUpdates: true
    - showFailureToaster: true
    - query: "{\n  index: 'survey_question',\n  body: {\n    \"query\": {\n        \"bool\": {\n            \"must\": [\n                {\n                    \"multi_match\": {\n                        \"query\": {{requires_question_search_input.value}},\n                        \"fields\": [\"symptoms.provider_label\", \"symptoms.patient_label\", \"question_text\"],\n                  \t\t\t\"type\": \"bool_prefix\"\n                    }\n                }\n            ],\n            \"must_not\": [\n                {\n                    \"match\": {\n                        \"historical_question\": true\n                    }\n                }\n            ]\n        }\n\t\t}\n  },\n  size: {{ requires_question_results.pageSize }},\n  from: {{ requires_question_results.paginationOffset }},\n}"
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - privateParams: []
    - triggersOnSuccess: []
    - runWhenPageLoadsDelay: ''
    - data: null
    - importedQueryInputs:
        ordered: []
    - showSuccessConfetti: false
    - isImported: false
    - showSuccessToaster: true
    - cacheKeyTtl: ''
    - metadata: null
    - triggersOnFailure: []
    - changesetObject: ''
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - watchedParams: []
    - enableErrorTransformer: false
    - showLatestVersionUpdatedWarning: false
    - timestamp: 0
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: false
    - showUpdateSetValueDynamicallyToggle: false
    - runWhenPageLoads: false
    - transformer: >-
        // type your code here

        // example: return formatDataAsArray(data).filter(row => row.quantity >
        20)

        return data
    - events: []
    - queryTimeout: '10000'
    - requireConfirmation: false
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - collection: ''
    - queryThrottleTime: '750'
    - updateSetValueDynamically: true
    - notificationDuration: ''
createdAt: 2021-08-10T20:52:50.740Z
