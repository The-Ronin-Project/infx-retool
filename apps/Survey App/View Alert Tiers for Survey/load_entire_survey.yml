id: load_entire_survey
type: datasource
subtype: SqlQueryUnified
resourceName: dc8029bc-3980-4836-841e-776c64eeca49
resourceDisplayName: Clinical Content PostgresSQL DB
template:
  ordered:
    - queryRefreshTime: ''
    - records: ''
    - lastReceivedFromResourceAt: null
    - databasePasswordOverride: ''
    - queryDisabledMessage: ''
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: latest
    - resourceNameOverride: ''
    - runWhenModelUpdates: true
    - showFailureToaster: true
    - query: >-
        select qgm.question_uuid, question_text, qg.title question_group,
        sa.generic_answer_display, sa.clinical_severity_order, sa.alert_tier
        default_alert_tier, altr.alert_tier override_alert_tier

        from surveys.survey_question_group_link sqgl

        join surveys.question_group_members qgm

        on qgm.question_group_uuid = sqgl.question_group_uuid

        join surveys.question

        on question.question_uuid = qgm.question_uuid

        join surveys.question_group qg

        on qg.uuid = qgm.question_group_uuid

        join surveys.specific_answer sa

        on sa.specific_answer_uuid = any(question.specific_answer_uuids)

        left join surveys.alert_tiers altr

        on sa.specific_answer_uuid = altr.specific_answer_uuid

        and altr.organization_uuid = {{org_select.value}}

        and altr.survey_uuid={{survey_select.value}}

        where sqgl.survey_uuid={{survey_select.value}}

        order by sqgl.position, qgm.position, sa.clinical_severity_order
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - privateParams: []
    - runWhenPageLoadsDelay: ''
    - warningCodes: []
    - data: null
    - recordId: ''
    - importedQueryInputs:
        ordered: []
    - isImported: false
    - showSuccessToaster: true
    - dataArray: []
    - cacheKeyTtl: ''
    - filterBy: ''
    - metadata: null
    - editorMode: sql
    - actionType: ''
    - shouldUseLegacySql: false
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - databaseNameOverride: ''
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - watchedParams: []
    - enableErrorTransformer: false
    - enableBulkUpdates: false
    - showLatestVersionUpdatedWarning: false
    - timestamp: 0
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: false
    - showUpdateSetValueDynamicallyToggle: true
    - bulkUpdatePrimaryKey: ''
    - runWhenPageLoads: false
    - transformer: >-
        // type your code here

        // example: return formatDataAsArray(data).filter(row => row.quantity >
        20)

        return data
    - events: []
    - tableName: ''
    - queryTimeout: '10000'
    - requireConfirmation: false
    - queryFailureConditions: ''
    - enableCaching: false
    - allowedGroups: []
    - databaseUsernameOverride: ''
    - shouldEnableBatchQuerying: false
    - doNotThrowOnNoOp: false
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2022-01-04T17:27:37.476Z
