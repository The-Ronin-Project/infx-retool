id: get_urls
type: datasource
subtype: RESTQuery
resourceName: 3613b0ef-8f05-48f6-9c3c-d5a8bd47c43c
resourceDisplayName: FHIRRoninCommonModel
template:
  ordered:
    - queryRefreshTime: ''
    - paginationLimit: ''
    - body: ''
    - lastReceivedFromResourceAt: null
    - queryDisabledMessage: ''
    - servedFromCache: false
    - offlineUserQueryInputs: ''
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: latest
    - workflowParams: null
    - resourceNameOverride: ''
    - runWhenModelUpdates: true
    - paginationPaginationField: ''
    - headers: >-
        [{"key":"Authorization","value":"Bearer
        {{get_simplifier_token.data.token}}"},{"key":"Accept","value":"application/fhir+json"},{"key":"Content-Type","value":"application/fhir+json"}]
    - showFailureToaster: true
    - paginationEnabled: false
    - query: StructureDefinition?_count=500
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - error: null
    - workflowRunBodyType: raw
    - privateParams: []
    - runWhenPageLoadsDelay: ''
    - data: null
    - importedQueryInputs:
        ordered: []
    - isImported: false
    - showSuccessToaster: true
    - cacheKeyTtl: ''
    - requestSentTimestamp: null
    - cookies: ''
    - metadata: null
    - queryRunTime: null
    - changesetObject: ''
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - finished: null
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - resourceTypeOverride: null
    - watchedParams: []
    - enableErrorTransformer: false
    - showLatestVersionUpdatedWarning: false
    - paginationDataField: ''
    - timestamp: 0
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: true
    - showUpdateSetValueDynamicallyToggle: true
    - runWhenPageLoads: false
    - transformer: >
        function getOrderedSet(set) {
          const orderedArray = Array.from(set);
          orderedArray.sort();
          return orderedArray;
        }


        var urls = data.entry.map(function(entry) { return entry.resource.url;
        })

        const urlSet = new Set(urls);

        const orderedURLs = getOrderedSet(urlSet);


        // Split the URLs into extensions and profiles

        const extensionURLs = orderedURLs.filter(url => url &&
        url.includes("Extension"));

        const profileURLs = orderedURLs.filter(url => url &&
        !url.includes("Extension"));


        return {extensionURLs, profileURLs};
    - events: []
    - queryTimeout: '10000'
    - workflowId: null
    - requireConfirmation: false
    - type: GET
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - bodyType: none
    - offlineQueryType: None
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2023-07-11T18:25:43.325Z
