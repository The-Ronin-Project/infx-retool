id: populate_review_queue
type: datasource
subtype: SqlQueryUnified
resourceName: dc8029bc-3980-4836-841e-776c64eeca49
resourceDisplayName: Clinical Content PostgresSQL DB
template:
  ordered:
    - queryRefreshTime: ''
    - records: ''
    - lastReceivedFromResourceAt: null
    - databasePasswordOverride: ''
    - queryDisabledMessage: ''
    - servedFromCache: false
    - offlineUserQueryInputs: ''
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: latest
    - resourceNameOverride: ''
    - runWhenModelUpdates: true
    - showFailureToaster: true
    - query: >-
        select concept_relationship.uuid as mapping_uuid, rc.display as
        relationship_display,source_concept.uuid as source_code_uuid,
        source_concept.display as source_display, source_concept.code as
        source_code, source_concept.system as source_system,
        source_concept.comments as source_comments, ctc.additional_data,
        ctc.additional_data->>'count_of_resources_affected' as
        count_of_resources_affected, pmu.first_last_name, * from
        concept_maps.concept_relationship

        join concept_maps.source_concept on source_concept.uuid =
        source_concept_uuid

        left join project_management.user pmu on
        source_concept.assigned_reviewer=pmu.uuid

        join concept_maps.relationship_codes rc on
        concept_relationship.relationship_code_uuid=rc.uuid

        left join custom_terminologies.code ctc on source_concept.code=ctc.code

        and source_concept.display = ctc.display

        and cast(source_concept.system as uuid) = ctc.terminology_version_uuid

        where source_concept.concept_map_version_uuid =
        {{urlparams.concept_map_version_uuid}}

        and ({{select_user.value}}::uuid IS NULL or
        source_concept.assigned_reviewer = {{select_user.value}})

        and ((concept_relationship.review_status is null) or
        (concept_relationship.review_status = 'ready for review'))
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - error: null
    - privateParams: []
    - runWhenPageLoadsDelay: ''
    - warningCodes: []
    - data: null
    - recordId: ''
    - importedQueryInputs:
        ordered: []
    - isImported: false
    - showSuccessToaster: true
    - dataArray: []
    - cacheKeyTtl: ''
    - filterBy: ''
    - requestSentTimestamp: null
    - databaseHostOverride: ''
    - metadata: null
    - editorMode: sql
    - queryRunTime: null
    - actionType: ''
    - changesetObject: ''
    - shouldUseLegacySql: false
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - finished: null
    - databaseNameOverride: ''
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - resourceTypeOverride: null
    - watchedParams: []
    - enableErrorTransformer: false
    - enableBulkUpdates: false
    - showLatestVersionUpdatedWarning: false
    - timestamp: 0
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: false
    - showUpdateSetValueDynamicallyToggle: true
    - bulkUpdatePrimaryKey: ''
    - runWhenPageLoads: false
    - transformer: >-
        // type your code here

        // example: return formatDataAsArray(data).filter(row => row.quantity >
        20)

        return data
    - events: []
    - tableName: ''
    - queryTimeout: '10001'
    - requireConfirmation: false
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - databaseUsernameOverride: ''
    - shouldEnableBatchQuerying: false
    - doNotThrowOnNoOp: false
    - offlineQueryType: None
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2022-10-05T18:44:29.505Z
folder: ready_for_review_tab
